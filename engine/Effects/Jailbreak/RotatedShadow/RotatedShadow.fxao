// RotatedShadow

//@Begin_vertex
#ifdef GL_ES
 precision mediump float;
#endif
uniform mat4 transformMatrix;
uniform mat4 projectionMatrix;

attribute vec4 position;
attribute vec2 texCoord;
varying vec2 textureCoordinate;

void main(void)
{
	textureCoordinate = texCoord;
	gl_Position = projectionMatrix * transformMatrix * position;
}
//@End
//@Begin_fragment
#ifdef GL_ES
 precision mediump float;
#endif
varying vec2 textureCoordinate;

uniform float fAngle;
uniform float fRadius;
uniform vec4 fC;
uniform float fA;

uniform sampler2D imgTexture;
uniform lowp vec4 blendColor;

void main(void)
{
	float vAngle = fAngle*0.0174532925;
	float dx = cos(vAngle) * fRadius;
	float dy = sin(vAngle) * fRadius;

	vec2 dxyr;
	dxyr.x = dx - dy;
	dxyr.y = dx + dy;
	vec4 color = texture2D(imgTexture, textureCoordinate);
    vec4 shade = texture2D(imgTexture, vec2(textureCoordinate.x-dxyr.x, textureCoordinate.y-dxyr.y));
    shade.a *= fA;
    shade.rgb = fC.rgb;

	if(color.a < 1.0) {
		color.r += (shade.r-color.r)*(1.0-color.a);
		color.g += (shade.g-color.g)*(1.0-color.a);
		color.b += (shade.b-color.b)*(1.0-color.a);
		color.a += (shade.a-color.a)*(1.0-color.a);
	}

	color *= blendColor;

	gl_FragColor = color;
}
//@End