// RotatedShadow

//@Begin_vertex
//version_####
#ifdef GL_ES
 precision mediump float;
#endif
in vec2 position;

uniform mat3 projectionMatrix;
uniform mat3 transformMatrix;
uniform mat3 objectMatrix;
uniform mat3 textureMatrix;

out vec2 textureCoordinate;

void main()
{
    vec3 pos = vec3(position, 1.0);
    textureCoordinate = (textureMatrix * pos).xy;
    gl_Position = vec4(projectionMatrix * transformMatrix * objectMatrix * pos, 1.0);
}
//@End
//@Begin_fragment
//version_####
#ifdef GL_ES
 precision mediump float;
#endif
in vec2 textureCoordinate;


uniform float fAngle;
uniform float fRadius;
uniform vec4 fC;
uniform float fA;

uniform sampler2D imgTexture;

uniform vec4 blendColor;

out vec4 fragColor;

void main(void)
{

	vec4 color = texture(imgTexture, textureCoordinate);
	if(color.a < 1.0) {
		vec4 shade = texture(imgTexture, vec2(textureCoordinate.x-fX, textureCoordinate.y-fY));
		shade.a *= fA;
		shade.rgb = fC.rgb;

		color.r += (shade.r-color.r)*(1.0-color.a);
		color.g += (shade.g-color.g)*(1.0-color.a);
		color.b += (shade.b-color.b)*(1.0-color.a);
		color.a += (shade.a-color.a)*(1.0-color.a);
	}

	color *= blendColor;


	fragColor = color; //gl_FragColor
}
//@End