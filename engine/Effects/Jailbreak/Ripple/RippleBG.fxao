// RippleBG

//@Begin_vertex
#ifdef GL_ES
 precision mediump float;
#endif
uniform mat4 transformMatrix;
uniform mat4 projectionMatrix;

attribute vec4 position;
attribute vec2 texCoord;
varying vec2 textureCoordinate;

void main(void)
{
	textureCoordinate = texCoord;
	gl_Position = projectionMatrix * transformMatrix * position;
}
//@End
//@Begin_fragment
#ifdef GL_ES
 precision mediump float;
#endif
varying vec2 textureCoordinate;

uniform sampler2D bckgTexture;

uniform float Step;
uniform float Intensity;
uniform float X, Y;

uniform lowp vec4 blendColor;

void main(void)
{
	float w = X - textureCoordinate.x;
	float h = Y - textureCoordinate.y;
	float distanceFromCenter = sqrt(w * w + h * h);
	
	float sinArg = distanceFromCenter * 10.0 - Step * 4.0;
	float slope = cos(sinArg) * Intensity;
	vec4 color = texture2D(bckgTexture, textureCoordinate + normalize(vec2(w, h)) * slope * 0.05);
	
	gl_FragColor = color * blendColor;
}
//@End