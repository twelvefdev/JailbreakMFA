// RippleBG

//@Begin_vertex
//version_####
#ifdef GL_ES
 precision mediump float;
#endif
in vec2 position;

uniform mat3 projectionMatrix;
uniform mat3 transformMatrix;
uniform mat3 objectMatrix;
uniform mat3 textureMatrix;

out vec2 textureCoordinate;

void main()
{
    vec3 pos = vec3(position, 1.0);
    textureCoordinate = (textureMatrix * pos).xy;
    gl_Position = vec4(projectionMatrix * transformMatrix * objectMatrix * pos, 1.0);
}
//@End
//@Begin_fragment
//version_####
#ifdef GL_ES
 precision mediump float;
#endif
in vec2 textureCoordinate;

uniform sampler2D bckgTexture;

uniform float Step;
uniform float Intensity;
uniform float X, Y;

uniform lowp vec4 blendColor;
out vec4 fragColor;

void main(void)
{
	float w = X - textureCoordinate.x;
	float h = Y - textureCoordinate.y;
	float distanceFromCenter = sqrt(w * w + h * h);
	
	float sinArg = distanceFromCenter * 10.0 - Step * 4.0;
	float slope = cos(sinArg) * Intensity;
	vec4 color = texture2D(bckgTexture, textureCoordinate + normalize(vec2(w, h)) * slope * 0.05);
	
	fragColor = color * blendColor; //gl_FragColor
}
//@End