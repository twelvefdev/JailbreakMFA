<html><head><title>Process Viewer Documentation</title>
<link rel='Stylesheet' href='css.css' type='text/css'>
<script language='Javascript'>
var cc = new Array(
 "<b>On Process ()</b> <i>[triggered]</i><br><br><i>No Parameters</i><br><br>This condition acts like the <i>On Loop</i> condition for fastloops. It is called for each process in the system when you use the <i>Enumerate Processes</i> action. All expressions for processes are set to the data for the current process just before each time this condition is triggered.",
 "<b>On Thread ()</b> <i>[triggered]</i><br><br><i>No Parameters</i><br><br>This condition acts like the <i>On Loop</i> condition for fastloops. It is called for each thread in the system when you use the <i>Enumerate Threads</i> action. All expressions for threads are set to the data for the current thread just before each time this condition is triggered.",
 "<b>On Module ()</b> <i>[triggered]</i><br><br><i>No Parameters</i><br><br>This condition acts like the <i>On Loop</i> condition for fastloops. It is called for each module of the process specified when you use the <i>Enumerate Module</i> action. All expressions for modules are set to the data for the current module just before each time this condition is triggered."
);
var aa = new Array(
 "<b>Update Process List ()</b></i><br><br><i>No Parameters</i><br><br>This action updates the snapshot of all system processes to the current data and allows you to read data from the beginning again. The process expressions are set to data for the first process in the snapshot.",
 "<b>Next Process ()</b><br><br><i>No Parameters</i><br><br>This action sets the process expressions to the data for the next process in the process snapshot.",
 "<b>Enumerate Processes ()</b><br><br><i>No Parameters</i><br><br>When you call this expression, the snapshot for all processes in the system is updated (like calling the <i>Update Process List</i> action, then each process is passed fastloop style to you using the <i>On Process</i> condition. Once the looping finishes, the process list is updated again and process expressions are set to data for the first process in the snapshot.",
 "<b>Update Thread List ()</b></i><br><br><i>No Parameters</i><br><br>This action updates the snapshot of all system threads to the current data and allows you to read data from the beginning again. The thread expressions are set to data for the first thread in the snapshot.",
 "<b>Next Thread ()</b><br><br><i>No Parameters</i><br><br>This action sets the thread expressions to the data for the next thread in the thread snapshot.",
 "<b>Enumerate Threads ()</b><br><br><i>No Parameters</i><br><br>When you call this expression, the snapshot for all threads in the system is updated (like calling the <i>Update Thread List</i> action, then each thread is passed fastloop style to you using the <i>On Thread</i> condition. Once the looping finishes, the thread list is updated again and thread expressions are set to data for the first thread in the snapshot.",
 "<b>Update Module List (integer Process ID)</b></i><br><br><i>Process ID</i> - this should be set to the process ID of a process you want to look at the modules of<br><br>This action updates the snapshot of all modules loaded into the specified process to the current data and allows you to read data from the beginning again. The module expressions are set to data for the first module in the snapshot.",
 "<b>Next Module ()</b><br><br><i>No Parameters</i><br><br>This action sets the module expressions to the data for the next module in the module snapshot.",
 "<b>Enumerate Modules (integer Process ID)</b><br><br><i>Process ID</i> - this should be set to the process ID of a process you want to enumerate the modules of<br><br>When you call this expression, the snapshot for all modules loaded into the specified process is updated (like calling the <i>Update Module List</i> action, then each module is passed fastloop style" + " to you using the <i>On Module</i> condition. Once the looping finishes, the module list is updated again and module expressions are set to data for the first module in the snapshot.",
 "<b>Terminate Process (integer Process ID)</b><br><br><i>Process ID</i> - this should be set to the process ID of the process you want to terminate<br><br>When you call this expression, the process you have selected is immediately terminated by Windows, however Windows must allow allow all file input/output commands to finish before it can terminate the process."
);
var ee = new Array(
 "<b>Process ID - integer pProcessID(object Process Viewer)</b></i><br><br><i>Process Viewer</i> - This is the object the expression reads data from<br><br>When retrieving information about a process, this is the unique identifier that identifies that process. This ID is needed to kill a process or get information about the modules of a process.",
 "<b>EXE Filename - string pExeFile$(object Process Viewer)</b></i><br><br><i>Process Viewer</i> - This is the object the expression reads data from<br><br>This returns the EXE application that started an application. On Windows 9x/ME this returns the complete path to the application, while on Windows NT/2K/XP this returns only the filename.",
 "<b>Thread Count - integer pThreadCnt(object Process Viewer)</b></i><br><br><i>Process Viewer</i> - This is the object the expression reads data from<br><br>This returns the number of threads contained by a process.",
 "<b>Process ID - integer pParentProcess(object Process Viewer)</b></i><br><br><i>Process Viewer</i> - This is the object the expression reads data from<br><br>Some processes can be started by others and the starter process is considered the parent of the process it started. If the current selected process in the process snapshot has a parent, this will return the process ID of that parent.",
 "<b>Priority Base - integer pPriorityBase(object Process Viewer)</b></i><br><br><i>Process Viewer</i> - This is the object the expression reads data from<br><br>This returns the default priority a thread has when created by this process.",
 "<b>Priority Class - integer pPriorityClass(object Process Viewer)</b></i><br><br><i>Process Viewer</i> - This is the object the expression reads data from<br><br>This is the priority class the process selected in the process snapshot belongs to.",
 "<b>Thread ID - integer tThreadID(object Process Viewer)</b></i><br><br><i>Process Viewer</i> - This is the object the expression reads data from<br><br>When retrieving information about a thread, this is the unique identifier that identifies that thread.",
 "<b>Owner Process - integer tOwnerProcess(object Process Viewer)</b></i><br><br><i>Process Viewer</i> - This is the object the expression reads data from<br><br>This returns process ID of the process that contains this thread.",
 "<b>Priority Base - integer tPriorityBase(object Process Viewer)</b></i><br><br><i>Process Viewer</i> - This is the object the expression reads data from<br><br>This returns the priority of the thread selected in the thread snapshot.",
 "<b>Module Name - string mModule$(object Process Viewer)</b></i><br><br><i>Process Viewer</i> - This is the object the expression reads data from<br><br>This returns the filename of the module selected in the module snapshot.",
 "<b>Module EXE Path - string mExePath$(object Process Viewer)</b></i><br><br><i>Process Viewer</i> - This is the object the expression reads data from<br><br>This returns the complete path of the module selected in the module snapshot.",
 "<b>Module Handle - integer mHandle(object Process Viewer)</b></i><br><br><i>Process Viewer</i> - This is the object the expression reads data from<br><br>When retrieving information about a module, this is the unique identifier that identifies that module.",
 "<b>Process ID - integer mProcessID(object Process Viewer)</b></i><br><br><i>Process Viewer</i> - This is the object the expression reads data from<br><br>This is the ID of the process the currently selected module is loaded into.",
 "<b>Base Address - integer mBaseAddress(object Process Viewer)</b></i><br><br><i>Process Viewer</i> - This is the object the expression reads data from<br><br>This returns the address in memory the currently selected module is loaded at.",
 "<b>Module Size - integer mBaseSize(object Process Viewer)</b></i><br><br><i>Process Viewer</i> - This is the object the expression reads data from<br><br>This returns the size in bytes of memory the currently selected module occupies."
);

function about() {
 var c = document.getElementById("c");
 c.innerHTML = "<b>About:</b> The <i>Process Viewer</i> is a simple extension that can retrieve information about all processes, threads, and modules on your system, and even terminate processes. This object is for Multimedia Fusion 1.5 and should only be distributed in the Bonus Pack it came in. You can visit my website at <a href='http://spatang.com'>http://spatang.com</a> or email me at <a href='mailto:xtraverse@spatang.com'>xtraverse@spatang.com</a>.<br><br>" + "<b>I've found a bug!</b> If you think you've found a bug, email me an example file showing the problem and I'll see if I can sort it out.<br><br><b>Disclaimer:</b> I, the creator of this extension, am in no way responsible to any harm that comes to you or your computer as a result of this extension. I provide this extension on an 'as is' basis and you are using this extension at your own risk.";
}

function how() {
 var c = document.getElementById("c");
 c.innerHTML = "<b>What the heck are processes?</b> A process is simply a running program that includes DLLs and other external libraries it uses. Processes are different than the windows shown in your start menu. A process can have as many windows as it wants or have no windows - just run in the background. For example, every explorer window runs under just one process. A thread follows one single path of execution in a program. This is the fundamental unit scheduled by Windows. " + "Threads do the real work for processes, processes simply contain them. A process must have at least one thread, but it can create more if it needs to. A module is the code a running process loads into memory to use. Modules are usually DLLs or drivers loaded by the program, but can include many other resources. The COX extensions you use in MMF applications are all modules loaded when your application runs.<br><br>" + "<b>How to use this object:</b> Simply go to your insert new object screen in MMF and find <i>Process Viewer</i> in the list. Click OK, and then click anywhere to insert the object. There is no setup box. Now that you have your object in your frame, it is time to code a method of viewing processes. There are two options for you:<br><br>" + "<li> The object contains three data <i>snapshots</i> that contain information about all processes, threads, and modules on the system. When the object starts, each snapshot is refreshed with its respective data. The modules snapshot will contain only modules from the first process in the process snapshot. You can update these snapshots by calling the <i>Update List</i> action from the event editor for the snapshot you wish to update." + " The data you can retrieve through expressions will be updated with the first process, thread, or snapshot in the list. To navigate to the next process/thread/module in the list, simply call the <i>Next</i> action for the snapshot you are viewing. Call <i>Update List</i> again to move back to the beginning and refresh with any changes that may have occurred since the last update.<br><br>" + "<li> Instead of making your own loops, you can call the <i>Enumerate</i> action. This will automatically refresh the snapshot needed, then immediately fastloop style send each process/thread/module to you in the respective condition. After the loop is done, the snapshot will be updated again.<br><br><b>Termination:</b> To terminate a process, simply provide its process ID to the terminate process action.";
}

function cnd() {
 var c = document.getElementById("c");
 c.innerHTML = "<table width=100% height=100% cellpadding=10><tr><td width=150 style='border-right: 1px solid black;'><b>Conditions</b><br><br><a href='javascript:view(cc,0)'>On Process</a><br><br><a href='javascript:view(cc,1)'>On Thread</a><br><br><a href='javascript:view(cc,2)'>On Module</a><br><br></td><td><div id=s width=100% height=100%></div></td></tr></table>";
}

function act() {
 var c = document.getElementById("c");
 c.innerHTML = "<table width=100% height=100% cellpadding=10><tr><td width=150 style='border-right: 1px solid black;'><b>Actions</b><br><br>Processes<br><br><a href='javascript:view(aa,0)'>&nbsp;&nbsp;Update Process List</a><br><br><a href='javascript:view(aa,1)'>&nbsp;&nbsp;Next Process</a><br><br><a href='javascript:view(aa,2)'>&nbsp;&nbsp;Enumerate Processes</a><br><br>" + "Threads<br><br><a href='javascript:view(aa,3)'>&nbsp;&nbsp;Update Thread List</a><br><br><a href='javascript:view(aa,4)'>&nbsp;&nbsp;Next Thread</a><br><br><a href='javascript:view(aa,5)'>&nbsp;&nbsp;Enumerate Threads</a><br><br>" + "Modules<br><br><a href='javascript:view(aa,6)'>&nbsp;&nbsp;Update Module List</a><br><br><a href='javascript:view(aa,7)'>&nbsp;&nbsp;Next Module</a><br><br><a href='javascript:view(aa,8)'>&nbsp;&nbsp;Enumerate Modules</a><br><br>" + "<hr><br><a href='javascript:view(aa,9)'>&nbsp;&nbsp;Terminate Process</a><br><br></td><td><div id=s width=100% height=100%></div></td></tr></table>";
}

function exp() {
 var c = document.getElementById("c");
 c.innerHTML = "<table width=100% height=100% cellpadding=10><tr><td width=150 style='border-right: 1px solid black;'><b>Expressions</b><br><br>Processes<br><br><a href='javascript:view(ee,0)'>&nbsp;&nbsp;Process ID</a><br><br><a href='javascript:view(ee,1)'>&nbsp;&nbsp;EXE Filename</a><br><br><a href='javascript:view(ee,2)'>&nbsp;&nbsp;Thread Count</a><br><br>" + "<a href='javascript:view(ee,3)'>&nbsp;&nbsp;Parent Process</a><br><br><a href='javascript:view(ee,4)'>&nbsp;&nbsp;Priority Base</a><br><br><a href='javascript:view(ee,5)'>&nbsp;&nbsp;Priority Class</a><br><br>" + "Threads<br><br><a href='javascript:view(ee,6)'>&nbsp;&nbsp;Thread ID</a><br><br><a href='javascript:view(ee,7)'>&nbsp;&nbsp;Owner Process</a><br><br><a href='javascript:view(ee,8)'>&nbsp;&nbsp;Priority Base</a><br><br>Modules<br><br>" + "<a href='javascript:view(ee,9)'>&nbsp;&nbsp;Module Name</a><br><br><a href='javascript:view(ee,10)'>&nbsp;&nbsp;Module EXE Path</a><br><br><a href='javascript:view(ee,11)'>&nbsp;&nbsp;Module Handle</a><br><br>" + "<a href='javascript:view(ee,12)'>&nbsp;&nbsp;Process ID</a><br><br><a href='javascript:view(ee,13)'>&nbsp;&nbsp;Base Address</a><br><br><a href='javascript:view(ee,14)'>&nbsp;&nbsp;Module Size</a><br><br>" + "</td><td><div id=s width=100% height=100%></div></td></tr></table>";
}

function view(obj, t) {
 var s = document.getElementById("s");
 s.innerHTML = obj[t];
}
</script>
</head>
<body onload='about()'>
<img src='shapes.jpg' class=i><div class=t align=center><b>Process Viewer</b><br><i>by xtraverse</i><br><br><img src='process.gif'></div>
<div class=r><a href='javascript: about()'>About</a><br><br><br><a href='javascript: how()'>How to Use</a><br><br><br><a href='javascript: cnd()'>Conditions</a><br><br><br><a href='javascript: act()'>Actions</a><br><br><br><a href='javascript: exp()'>Expressions</a></div>
<div class=c id=c></div>
</body>
</html>